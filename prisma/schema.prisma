// Esquema de base de datos para plataforma de e-commerce inteligente

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?
  phone         String?
  address       String?
  city          String?
  country       String?
  postalCode    String?
  isAdmin       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  orders        Order[]
  cart          Cart?
  reviews       Review[]
  recommendations Recommendation[]
  chatMessages  ChatMessage[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  products    Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  image       String?
  stock       Int      @default(0)
  sku         String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]
  recommendations Recommendation[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Relaciones
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  
  // Relaciones
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  
  // Relaciones
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Recommendation {
  id           String   @id @default(cuid())
  userId       String
  productId    String
  score        Float
  reason       String?
  type         RecommendationType
  createdAt    DateTime @default(now())
  
  // Relaciones
  user         User     @relation(fields: [userId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
}

model ChatMessage {
  id        String           @id @default(cuid())
  userId    String?
  message   String
  response  String
  isBot     Boolean          @default(true)
  createdAt DateTime         @default(now())
  
  // Relaciones
  user      User?           @relation(fields: [userId], references: [id])
}

model SalesData {
  id            String   @id @default(cuid())
  date          DateTime
  totalSales    Float
  totalOrders   Int
  avgOrderValue Float
  topProducts   String   // JSON string of top product IDs
  createdAt     DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum RecommendationType {
  SIMILAR_PRODUCTS
  FREQUENTLY_BOUGHT_TOGETHER
  TRENDING
  PERSONALIZED
  CATEGORY_BASED
}